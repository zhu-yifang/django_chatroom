# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  django_app:
    build:
      context: .
    ports:
      - 8000:8000
    env_file:
      - ./.env
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    volumes:
      - static_volume:/app/staticfiles # Mount point for static files
      - media_volume:/app/media # Mount point for media files
  db:
    image: postgres
    restart: always
    user: postgres
    # Expose a port to the host machine for debugging
    # ports:
    #   - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  nginx:
    image: nginx:alpine
    ports:
      - "80:80" # Map Nginx to port 80 on the host
      - "443:443" # Map Nginx to port 443 on the host
    volumes:
      - static_volume:/usr/share/nginx/html/staticfiles # Serve static files from here
      - media_volume:/usr/share/nginx/html/media # Serve media files from here
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Use custom Nginx config
      - /etc/letsencrypt:/etc/letsencrypt # Mount the Let's Encrypt certificates
    depends_on:
      - django_app
  redis:
    image: redis:alpine
    restart: always
    # Expose a port to the host machine for debugging
    # ports:
    #   - 6379:6379

volumes:
  db-data:
  static_volume: # Define the volume for static files
  media_volume: # Define the volume for media files
